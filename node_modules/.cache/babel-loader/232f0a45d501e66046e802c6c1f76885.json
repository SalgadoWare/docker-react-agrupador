{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alejandro\\\\Desktop\\\\react\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Header from \"./components/Header\";\nimport ListaItems from \"./components/ListaItems\";\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //si queremos acceder a un JSON local let info = require('./base.json')\n\n  const [infoApp, updateInfo] = useState([]);\n  useEffect(() => {\n    const fecthData = async () => {\n      const response = await fetch(`http://localhost:5000/mydb`);\n      const infoApp = await response.json();\n      updateInfo(infoApp);\n    };\n    fecthData();\n  }, []);\n  function appUpdateText(_id, _texto) {\n    const index = infoApp.findIndex(element => element.id === _id);\n    if (index >= 0) {\n      infoApp = [...infoApp.slice(0, index), {\n        ...infoApp[index],\n        texto: ''\n      }, ...infoApp.slice(index + 1)];\n    }\n  }\n  function appChangesText(_id, _texto) {\n    const newElement = {\n      id: _id,\n      texto: _texto\n    };\n    const newInfoApp = infoApp.map(el => {\n      if (el.id === newElement.id) {\n        return {\n          ...el,\n          texto: el.texto + '\\n' + newElement.texto\n        };\n      } else {\n        return el;\n      }\n    });\n    updateInfo(newInfoApp);\n  }\n  async function actualizarServer(registro) {\n    await fetch(`http://localhost:5000/mydb/${registro.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(registro)\n    });\n  }\n  async function exportData() {\n    infoApp.forEach(async registro => {\n      await actualizarServer(registro);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"AGRUPADOR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportData,\n        children: \"Exportar todos los datos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      appChangesText: appChangesText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"divListaItems\",\n      children: /*#__PURE__*/_jsxDEV(ListaItems, {\n        _info: infoApp,\n        appUpdateText: appUpdateText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n/*La funcion devuelve código JSX*/\n/*importante: en JSX todos los elementos deben tener un PADRE */\n/*className=\"container\" class es una palabra reservada, en JSX se usa className*/\n_s(App, \"1NkDGgspygyx7HjuDQINz1vXO4s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","ListaItems","useState","useEffect","App","infoApp","updateInfo","fecthData","response","fetch","json","appUpdateText","_id","_texto","index","findIndex","element","id","slice","texto","appChangesText","newElement","newInfoApp","map","el","actualizarServer","registro","method","headers","body","JSON","stringify","exportData","forEach"],"sources":["C:/Users/Alejandro/Desktop/react/my-app/src/App.js"],"sourcesContent":["import Header from \"./components/Header\"\r\nimport ListaItems from \"./components/ListaItems\"\r\nimport { useState, useEffect } from 'react'\r\n\r\nfunction App() {\r\n  //si queremos acceder a un JSON local let info = require('./base.json')\r\n\r\n  const [infoApp, updateInfo] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fecthData = async () => {\r\n      const response = await fetch(`http://localhost:5000/mydb`);\r\n      const infoApp = await response.json();\r\n      updateInfo(infoApp);\r\n    }\r\n\r\n    fecthData();\r\n  }, []);\r\n\r\n  function appUpdateText(_id, _texto) {\r\n    const index = infoApp.findIndex(element => element.id === _id);\r\n\r\n    if (index >= 0) {\r\n      infoApp = [\r\n        ...infoApp.slice(0, index),\r\n        { ...infoApp[index], texto: '' },\r\n        ...infoApp.slice(index + 1)\r\n      ];\r\n    }\r\n  }\r\n\r\n  function appChangesText(_id, _texto) {\r\n    const newElement = { id: _id, texto: _texto };\r\n    const newInfoApp = infoApp.map(el => {\r\n      if (el.id === newElement.id) {\r\n        return { ...el, texto: el.texto + '\\n' + newElement.texto };\r\n      } else {\r\n        return el;\r\n      }\r\n    });\r\n\r\n    updateInfo(newInfoApp);\r\n  }\r\n\r\n  async function actualizarServer(registro) {\r\n    await fetch(`http://localhost:5000/mydb/${registro.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(registro)\r\n    });\r\n  }\r\n\r\n  async function exportData() {\r\n    infoApp.forEach(async registro => {\r\n      await actualizarServer(registro);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div><h1>AGRUPADOR</h1></div>\r\n      <div><button onClick={exportData}>Exportar todos los datos</button></div>\r\n      <Header appChangesText={appChangesText} />\r\n      <div className=\"divListaItems\">\r\n        <ListaItems _info={infoApp} appUpdateText={appUpdateText} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n/*La funcion devuelve código JSX*/\r\n/*importante: en JSX todos los elementos deben tener un PADRE */\r\n/*className=\"container\" class es una palabra reservada, en JSX se usa className*/\r\nexport default App\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}