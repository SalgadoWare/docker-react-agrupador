{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alejandro\\\\Desktop\\\\react\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Header from \"./components/Header\";\nimport ListaItems from \"./components/ListaItems\";\nimport { useState, useEffect } from 'react';\n\n//npm run dev para iniciar la aplicaci贸n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //si queremos acceder a un JSON local let info = require('./base.json')\n\n  useEffect(() => {\n    fecthData();\n  }, []);\n  const fecthData = async () => {\n    const response = await fetch(`http://localhost:5000/mydb`);\n    infoApp = await response.json();\n    updateInfo(infoApp);\n  };\n  let [infoApp, updateInfo] = useState([]);\n  async function actualizarServer() {\n    await fetch(`http://localhost:5000/mydb`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(infoApp)\n    });\n  }\n  async function exportData() {\n    limpiarServer();\n    actualizarServer();\n  }\n  function appUpdateText(_id, _texto) {\n    let element = {\n      \"id\": _id,\n      \"texto\": _texto\n    };\n    let idAreaTexto = 'areaTexto' + _id;\n    let textArea = document.getElementById(idAreaTexto);\n    textArea.value = '';\n    let textAreaPrincipal = document.getElementById('areaPrincipal');\n    textAreaPrincipal.value = element.texto;\n    infoApp.forEach((element, i) => {\n      if (element.id == _id) {\n        infoApp.at(i).texto = '';\n      }\n    });\n  }\n  function appChangesText(_id, _texto) {\n    let newElement = {\n      \"id\": _id,\n      \"texto\": _texto\n    };\n    return updateInfo(infoApp.map((el, i) => {\n      if (i == newElement.id) {\n        el.texto = el.texto + '\\n' + newElement.texto;\n        return el;\n      } else {\n        return el;\n      }\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"AGRUPADOR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportData,\n        children: \"Exportar todos los datos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      appChangesText: appChangesText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"divListaItems\",\n      children: /*#__PURE__*/_jsxDEV(ListaItems, {\n        _info: infoApp,\n        appUpdateText: appUpdateText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n  async function borrarServer(_id) {\n    await fetch(`http://localhost:5000/mydb` + '/' + _id, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  function limpiarServer() {\n    borrarServer('A');\n    borrarServer('B');\n    borrarServer('C');\n    borrarServer('D');\n    borrarServer('E');\n  }\n}\n/*La funcion devuelve c贸digo JSX*/\n/*importante: en JSX todos los elementos deben tener un PADRE */\n/*className=\"container\" class es una palabra reservada, en JSX se usa className*/\n_s(App, \"4GPgHblCcNYpa5aIwKNFqgm8HPc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","ListaItems","useState","useEffect","App","fecthData","response","fetch","infoApp","json","updateInfo","actualizarServer","method","headers","body","JSON","stringify","exportData","limpiarServer","appUpdateText","_id","_texto","element","idAreaTexto","textArea","document","getElementById","value","textAreaPrincipal","texto","forEach","i","id","at","appChangesText","newElement","map","el","borrarServer"],"sources":["C:/Users/Alejandro/Desktop/react/my-app/src/App.js"],"sourcesContent":["import Header from \"./components/Header\"\r\nimport ListaItems from \"./components/ListaItems\"\r\nimport {useState, useEffect} from 'react'\r\n\r\n//npm run dev para iniciar la aplicaci贸n\r\n\r\nfunction App(){\r\n    //si queremos acceder a un JSON local let info = require('./base.json')\r\n\r\n    useEffect(() => {\r\n      fecthData()\r\n    } , [])\r\n\r\n    const fecthData = async () => {\r\n      const response = await fetch(`http://localhost:5000/mydb`)\r\n      infoApp = await response.json()\r\n      updateInfo(infoApp)\r\n    }\r\n    let [infoApp,updateInfo] = useState([])\r\n\r\n   \r\n    async function actualizarServer(){\r\n      await fetch(`http://localhost:5000/mydb`,{\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body:JSON.stringify(infoApp)\r\n    })\r\n    }\r\n\r\n    async function exportData(){\r\n      limpiarServer()\r\n      actualizarServer()\r\n  }\r\n\r\n    function appUpdateText(_id,_texto){\r\n      let element = {\"id\":_id,\"texto\":_texto}\r\n      let idAreaTexto = 'areaTexto' + _id;\r\n      let textArea = document.getElementById(idAreaTexto);\r\n      textArea.value='';\r\n\r\n      let textAreaPrincipal = document.getElementById('areaPrincipal');\r\n      textAreaPrincipal.value = element.texto;\r\n\r\n     infoApp.forEach((element,i) => {\r\n      if(element.id == _id){\r\n        infoApp.at(i).texto=''\r\n      }\r\n     })\r\n\r\n  }\r\n\r\n \r\n\r\n    function appChangesText(_id,_texto){\r\n        let newElement = {\"id\":_id,\"texto\":_texto}\r\n        return (\r\n            updateInfo(infoApp.map((el, i) => {\r\n              if (i == newElement.id) {\r\n                el.texto=el.texto + '\\n' + newElement.texto\r\n                return el;\r\n              }else{\r\n                return el;\r\n              }\r\n            })\r\n        )\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n        <div><h1>AGRUPADOR</h1></div>\r\n        <div><button onClick={exportData}>Exportar todos los datos</button></div>\r\n        <Header appChangesText={appChangesText}/>\r\n        <div className=\"divListaItems\"> \r\n        <ListaItems _info={infoApp} appUpdateText={appUpdateText}/>\r\n        </div>\r\n        </>\r\n    )\r\n\r\n    async function borrarServer(_id){\r\n      await fetch(`http://localhost:5000/mydb` + '/'+_id,{\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    }\r\n\r\n    function limpiarServer(){\r\n      borrarServer('A');\r\n      borrarServer('B');\r\n      borrarServer('C');\r\n      borrarServer('D');\r\n      borrarServer('E');\r\n    }\r\n}\r\n/*La funcion devuelve c贸digo JSX*/\r\n/*importante: en JSX todos los elementos deben tener un PADRE */\r\n/*className=\"container\" class es una palabra reservada, en JSX se usa className*/\r\nexport  default App\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}